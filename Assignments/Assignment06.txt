## Theory 

**Chapter - 06 - Exploring the World! **

1. What is a Microservice ?
Ans:- Microservices are an architectural and organizational approach to software development 
      where software is composed of small independent services that communicate over well-defined APIs. 
      These services are owned by small, self-contained teams.
     
2. What is Monolithic?  
Ans:- monolithic architectures, all processes are tightly coupled and run as a single service. 
    - A monolithic application describes a single-tiered software application in which the user interface and 
      data access code are combined into a single program from a single platform. 
    - A monolithic application is self-contained and independent from other computing applications.

3. Diffrence between Monolithic and microservice architecture ?
Ans: 
-With monolithic architectures, all processes are tightly coupled and run as a single service. 
 This means that if one process of the application experiences a spike in demand, the entire architecture must be scaled. 
 Adding or improving a monolithic application’s features becomes more complex as the code base grows.
 This complexity limits experimentation and makes it difficult to implement new ideas. 
 Monolithic architectures add risk for application availability because many dependent and tightly coupled processes increase the impact of a single process failure.

-With a microservices architecture, an application is built as independent components that run each application process as a service. 
 These services communicate via a well-defined interface using lightweight APIs. 
 Services are built for business capabilities and each service performs a single function. 
 Because they are independently run, each service can be updated, deployed, and scaled to meet demand for specific functions of an application.

4. Why do we need useState Hook ?
Ans: 
Allows us to perform side effects in your components. 
Some examples of side effects are: fetching data, directly updating the DOM, and timers. 
useEffect accepts two arguments(callback and dependency array).

-By using this Hook, you tell React that your component needs to do something after render.
React will remember the function you passed (we’ll refer to it as our “effect”), and call it later
after performing the DOM updates. syntax => useEffect(() =>{}, []);

5. What is optional chaining (?.) ?
- The optional chaining (?.) operator accesses an object's property or calls a function.
- If the object accessed or function called using this operator is undefined or null, 
  the expression short circuits and evaluates to undefined instead of throwing an error.

6. What is Shimmer UI ?
 - A shimmer UI resembles the page's actual UI, so users will understand how quickly the web or mobile app will load even before the content has shown up.
  It gives people an idea of what's about to come and what's happening (it's currently loading) when a page full of content/data takes more than 3 - 5 seconds to load.  
- Shimmer is a temporary animation placeholder for when a service call takes time to
  return data and we don't want to block rendering the rest of the UI.

7. What is the difference between JS expression and JS statement?
- JS Expression : An expression is any word or group of words or symbols that is a value.
  Ex : const, let, 2, 4, s, a, true, false etc.
- JS Statement : A statement is a group of expressions and/or statements that you design to
  carry out a task or an action. 
  Ex const price = 500;

8. What is Conditional Rendering, explain with a code example
- Conditional rendering is a term to describe the ability to render different user
  interface (UI) markup if a condition is true or false. In React, it allows us to render different
  elements or components based on a condition. 
  Ex :
   {isLoggedIn ? <button>Logout</button> : <button>Login</button>}
   {isLoggedIn && <button>Logout</button>}  

9. What is CORS?
- Cross-origin resource sharing (CORS) is a browser mechanism which enables
controlled access to resources located outside of a given domain.

10. What is async and await?
- The async function declaration declares an async function where the await keyword
is permitted within the function body. The async and await keywords enable asynchronous,
promise-based behavior to be written in a cleaner style, avoiding the need to explicitly
configure promise chains.   

11. What is the use of `const json = await data.json();` in getRestaurants()?
- data.json() is a method on the Response object that lets you extract a JSON object
from the response. The method returns a promise, so you have to wait for the JSON coming from API: await
data.json().